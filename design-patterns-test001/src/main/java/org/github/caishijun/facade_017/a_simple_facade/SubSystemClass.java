package org.github.caishijun.facade_017.a_simple_facade;

/**
 * 一、外观模式介绍
 *
 * 面向对象的一个比较重要的法则：迪米特法则（最少知识原则）：一个软件实体应当尽可能少的与其他实体发生相互作用。
 *
 * 外观模式：为子系统中的一组接口提供一个一致的界面，此模式定义了一个高层接口。这个接口使得这一子系统更加容易使用。说白了，就可以理解为封装
 *
 * 外观模式的核心：为子系统提供统一的入口，封装子系统的复杂性，便于客户端调用
 *
 * 例1：股民炒股
 *
 * 未使用外观模式情况
 *
 *
 *
 * 要让股民尽可能少的与股票直接打交道，给其提供一个蒙面，让股民跟蒙面打交道。这样就符合了迪米特法则，让股民尽可能少的与股票打交道了。
 *
 * 增加了外观模式后的类图：
 *
 *
 *
 * 例2：客户喝茶，客户要尽可能少的与子系统（开水，茶具，茶叶...）打交道，提供一个服务员，统一了喝茶的入口。
 *
 *
 *
 * 例3：公司注册流程
 *
 * 未使用外观模式的注册流程
 *
 *
 *
 * 使用了外观模式后呢？也就是找个代理公司来帮我们做这些事
 *
 *
 *
 * 外观模式类结构图：
 *
 *
 * 来源网址：https://www.cnblogs.com/meet/p/5116447.html
 *
 *
 * 二、外观模式代码实现
 *
 * 外观模式代码实现
 *
 * 未使用外观模式情况下，代码如下
 *
 * 子系统代码：
 */

/**
 * 所有子系统
 */
public class SubSystemClass {
    public void methodOne(){
        System.out.println("子系统方法1");
    }
}
class SubSystemClass2{
    public void methodTwo(){
        System.out.println("子系统方法2");
    }
}
class SubSystemClass3{
    public void methodThree(){
        System.out.println("子系统方法3");
    }
}
